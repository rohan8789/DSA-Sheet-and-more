183
70 27 26 4 11 14 36 4 9 20 1 87 40 11 10 8 5 31 54 30 5 20 75 7 37 39 48 57 59 35 42 40 47 13 9 80 25 52 86 20 51 18 58 56 51 20 3 41 42 76 11 23 16 61 18 2 34 2 70 7 44 23 19 2 5 25 17 13 66 6 39 28 28 46 56 43 17 58 24 9 59 33 55 58 13 1 53 30 71 20 13 56 31 91 2 13 23 27 1 37 17 42 21 31 45 10 58 2 9 71 6 43 50 13 66 25 39 53 17 48 32 1 7 24 25 37 7 57 17 44 22 78 74 10 19 42 4 71 9 49 79 3 8 23 83 79 37 25 11 77 34 3 51 65 18 32 3 41 37 67 36 12 19 51 27 52 6 49 8 77 70 4 5 3 4 28 23 13 31 2 69 19 31
76 54 96 18 33 36 70 64 100 37 1 89 64 59 75 72 100 31 73 31 85 61 76 67 65 84 70 74 90 89 84 57 97 36 94 100 27 73 98 97 86 91 79 62 58 39 3 59 71 93 75 90 71 73 80 93 53 63 96 7 69 86 77 76 26 80 28 57 72 88 66 49 99 77 74 57 100 69 87 90 87 55 63 64 22 35 59 36 87 83 78 95 88 100 10 39 24 31 43 37 18 96 98 42 91 61 65 51 36 96 52 92 75 22 75 62 50 83 91 65 99 44 32 40 70 78 44 58 28 57 81 97 88 62 97 81 99 79 33 59 88 83 88 82 96 90 41 67 96 96 72 88 81 68 80 79 66 96 58 98 45 27 28 79 74 58 26 100 12 82 78 22 88 81 55 57 65 89 76 57 83 57 40
op:- 16

Example 1:

Input:
N = 2
start[] = {2, 1}
end[] = {2, 2}
Output: 
1
Explanation:
A person can perform only one of the
given activities.
Example 2:

Input:
N = 4
start[] = {1, 3, 2, 5}
end[] = {2, 4, 3, 6}
Output: 
3
Explanation:
A person can perform activities 1, 2
and 4.





class Solution
{
    public:
    static bool cmp(const pair<int,int>&a, const pair<int,int>&b){
        return a.second<b.second;
    }
    
    int activitySelection(vector<int> start, vector<int> end, int n)
    {
        vector<pair<int,int>>vp;
        for(int i=0; i<n; i++){
            vp.push_back({start[i], end[i]});
        }
        sort(vp.begin(), vp.end(), cmp);
        int c=1;
        int endtime=vp[0].second;
        for(int i=1; i<n; i++){
            if(vp[i].first<=endtime){
                continue;
            }else{
                c++;
                endtime=max(endtime,vp[i].second);
            }
        }
        return c;
    }
};
