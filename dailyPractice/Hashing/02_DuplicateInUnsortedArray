Input:
N = 4
a[] = {0,3,1,2}
Output: -1
Explanation: N=4 and all elements from 0
to (N-1 = 3) are present in the given
array. Therefore output is -1.
Example 2:

Input:
N = 5
a[] = {2,3,1,2,3}
Output: 2 3 
Explanation: 2 and 3 occur more than once
in the given array.
Your Task:
Complete the function duplicates() which takes array a[] and n as input as parameters and returns a list of elements that occur more than once
in the given array in a sorted manner. If no such element is found, return list containing [-1]. 

Expected Time Complexity: O(n).
Expected Auxiliary Space: O(n).

Constraints:
1 <= N <= 105
0 <= A[i] <= N-1, for each valid i






//Fails on >2 duplicates

class Solution{
  public:
    vector<int> duplicates(int arr[], int n) {
        // code here
        vector<int>v;
        
        for(int i=0; i<n; i++){
            int index = arr[i]%n;
            arr[index]=arr[index]+n;
        }
        for(int i=0; i<n; i++){
            if(arr[i]/n>=2){
                v.push_back(i);
            }
        }
        if(v.size()==0){
            v.push_back({-1});
        }
        return v;
    }
};







//Multiple duplicates handled
class Solution{
  public:
    vector<int> duplicates(int arr[], int n) {
        // code here
        vector<int>v;
        for(int i=0; i<n; i++){
            arr[i]++;
        }
        for(int i=0; i<n; i++){
            int ele=abs(arr[i]);
            if(ele>=n+1){
                ele=ele/(n+1);
            }
            if(arr[ele-1]>=0){
                arr[abs(ele-1)]=-arr[abs(ele-1)];
            }else{
                if(abs(arr[ele-1])>n){
                    continue;
                }
                else if(abs(ele-1)<=n){
                    v.push_back(ele-1);
                    arr[ele-1]=arr[ele-1]*(n+1);
                }
            }
        }
        if(v.size()==0){
            return {-1};
        }
        sort(v.begin(),v.end());
        return v;
    }
};
