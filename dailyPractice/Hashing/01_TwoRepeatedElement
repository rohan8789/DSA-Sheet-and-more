Input:
N = 4
array[] = {1,2,1,3,4,3}
Output: 1 3


Input:
N = 2
array[] = {1,2,2,1}
Output: 2 1


 Method 1:-
 /*
      In this approach releative order is not maintained and also does not work for more than two duplicate elements
      it can work for more than 2 distinct duplicates but will not work for multiple duplicate of same element
 */


class Solution {
  public:
    vector<int> twoRepeated (int arr[], int n) {
        vector<int>v;
        for(int i=0; i<n+2;){
            if(arr[i]!=arr[arr[i]]){
                swap(arr[i], arr[arr[i]]);
            }else{
                i++;
            }
        }
        for(int i=0; i<n+2; i++){
            if(i!=arr[i]){
                v.push_back(arr[i]);
            }
            cout<<i<<" "<<arr[i]<<endl;
        }
        return v;
    }
};

Method 2:- 
//Marking the index as negative , it will not work for more than two negative element
Intuition:- 

The idea is to mark the elements in the array as negative. when index is found which is already marked 
then it can be our answer
say arr[arr[5]] = arr[1] = 3;
and, arr[arr[8]] = arr[1] = 3;
which means arr[5] and arr[8] both contains 1 hence, when arr[5] was marked negative. then any number of 
duplicate elements come it will be marked negative


class Solution {
  public:
    //Function to find two repeated elements.
    vector<int> twoRepeated (int arr[], int n) {
        // Your code here
        vector<int> v;
        for(int i=0; i<n+2; i++){
            if(arr[abs(arr[i])]>0){
                arr[abs(arr[i])]=-arr[abs(arr[i])];
            }else{
                v.push_back(abs(arr[i]));
            }
        }
        if(v.size()==0){
            v.push_back({-1});
        }
        return v;
    }
};



// 0 case handled
class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        vector<int> v;
        int n=nums.size();
        for(int i=0; i<n; i++){
            if(nums[abs(nums[i])-1]>=0){    
                nums[abs(nums[i])-1]=-nums[abs(nums[i])-1];
            }else{
                v.push_back(abs(nums[i]));
            }
        }
        
        return v;
    }
};
