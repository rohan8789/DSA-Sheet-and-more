Given an array arr[] of N positive integers, the task is to find the greatest element on the left of every element 
in the array which is strictly smaller than itself, if this element does not exist for an index print "-1".

Input:
N = 5
arr[] = {2, 3, 4, 5, 1}
Output: 
-1 2 3 4 -1

Input:
N = 3
arr[] = {1, 2, 3} 
Output:
-1 1 2 



Intuition: At first, Applying stack seems a good idea. but this is not a stack problem. see for example,
For Input: 
7
3 5 4 2 2 5 5
correct Output: 
-1 3 3 -1 -1 4 4
stack output is different 
If you re-read the question, you will find this line,

 “the task is to find the greatest element on the left of every element in the array which is strictly smaller than itself”
It is not asked to find the first smaller element you will find on left side,
rather it is asked find the largest smallest number you can find on the left side of ith element which is strictly lesser than ith element, 
If you had enough practice you will quickly realise the fact that stack will never work in this conditions since once you pop out from stack 
its gone and it may happen the element you just popped was the largest smallest for some other ith element,

what to use then ????
this question turns out to be a implementation of binary search, 
since we wanna know what is the element which is largest smallest of the ith element 

We can use set, which gives us element in sorted order. as well as bound inbuilt function.


What is lower bound;
lower_bound is a in-built function which returns an iterator to an element 
where the element is greater than or equal to the element passed to lower_bound function
if element is present, it returns that element else. returns just greater than that element present in ds.

In case of upper bound, it returns element just greater than the passed element.



How can we use set and lower_bound for this problem???????
Idea:-
We iterate from i=0 to n-1, now at every ith position we binary search on set and 
find the largest smallest if there is one. If the iterator of set is pointing at the beginning 
of the set, this means there is no element smaller than ith element and this is the reason 
the iterator never moved ahead, remember SET stores element in increasing order and if the iterator 
is at the first element this means this element is greater than ith element and hence we push -1 in 
res since there is no element less than ith element and hence iterator never moved forward. Similarly 
if the iterator has moved forward, it is pointing to an element which is greater than or equal to 
ith element and hence we decrease iterator to get the largest smallest element of ith element


vector<int> Smallestonleft(int arr[], int n)
{
    vector<int>v;
    set<int>s;
    for(int i=0; i<n; i++){
        auto itr = s.lower_bound(arr[i]);
        if(itr==s.begin()){
            v.push_back(-1);
        }else{
            itr--;
            v.push_back(*itr);
        }
        s.insert(arr[i]);
    }
    return v;
}
