The main logic is that maintain the minimum value and maximum value we get till every index



Input:
n = 9
arr[] = {34, 8, 10, 3, 2, 80, 30, 33, 1}
Output: 
6
Explanation: 
In the given array arr[1] < arr[7]  satisfying 
the required condition (arr[i] <= arr[j])  thus 
giving the maximum difference of j - i which is
6(7-1).


//N^2 solution


class Solution{
public:
    int maxIndexDiff(int arr[], int N) {
        // code here
       int i=0, j=N-1, res=0;
        int ans=INT_MIN;
        while(i<N){
            if(arr[i]<=arr[j]){
                res=j-i;
                ans=max(ans,res);
                i++;
                j=N-1;
            }
            else{
                j=j-1;
            }
        }
        return ans;
    }
};


Method 02:-

class Solution{
public:
    int maxIndexDiff(int arr[], int n) {
        // code here
        int lmin[n]={0};
        int rmax[n]={0};
        lmin[0]=arr[0];
        for(int i=1; i<n; i++){
            lmin[i]=min(lmin[i-1], arr[i]);
        }
        rmax[n-1]=arr[n-1];
        for(int i=n-2; i>=0; --i){
            rmax[i]=max(rmax[i+1], arr[i]);
        }
        int i=0,j=0;
        int diff=-1;
        while(i<n&&j<n){
            if(lmin[i]<=rmax[j]){
                diff=max(diff, j-i);
                j++;
            }else{
                i++;
            }
        }
        return diff;
    }

};
