//1 time rotation
void rotate(int arr[], int n)
{
    int t=arr[n-1];
    for(int i=n-1; i>=0; --i){
        arr[i]=arr[i-1];
    }
    arr[0]=t;
}

//k times rotation n*d solution
for(int i=0; i<d; i++){
   int t=arr[0];
   for(int j=0; j<n-1; ++j){
       arr[j]=arr[j+1];
   }
   arr[n-1]=t;
}

//n space, d+(n-d)+((n-d)+n) solution
void rotateArr(int arr[], int d, int n){
// code here
  if(d>n){
      d=d%n;
  }
  int brr[n]={0};
  for(int i=0; i<d; i++)brr[i]=arr[i];
  for(int i=d; i<n; i++)arr[i-d]=arr[i];
  for(int i=n-d; i<n; i++){
      arr[i]=brr[i-(n-d)];
  }        
}


//n time constant space
void Reverse(int *arr, int l, int h){
    while(l<=h){
        swap(arr[l++],arr[h--]);
    }
}
void rotateArr(int arr[], int d, int n){
    // code here
    if(d>n){
        d=d%n;
    }
    Reverse(arr,0,d-1);
    Reverse(arr,d,n-1);
    Reverse(arr,0,n-1);
}
