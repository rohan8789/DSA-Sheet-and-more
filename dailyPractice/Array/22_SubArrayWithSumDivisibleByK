Given an integer array nums and an integer k, return true if nums has a good subarray 
or false otherwise.

A good subarray is a subarray where:

its length is at least two, and
the sum of the elements of the subarray is a multiple of k.
Note that:

A subarray is a contiguous part of the array.
An integer x is a multiple of k if there exists an integer n such that x = n * k. 
0 is always a multiple of k.
 

Example 1:

Input: nums = [23,2,4,6,7], k = 6
Output: true
Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.
Example 2:

Input: nums = [23,2,6,4,7], k = 6
Output: true
Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements 
sum up to 42.
42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.
Example 3:

Input: nums = [23,2,6,4,7], k = 13
Output: false





Intuition:-
let say the sum of subarray in an array when divided by k leaves remainder x.
Another sum of subarray in that array when divided by k leaves remainder x.
then, difference between these subarrays will be divisible by k





class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        int n=nums.size(), presum=0;
        if(n<=1){
            return false;
        }
        unordered_map<int,int> m;
        m.insert({0,0});
        for(int i=0; i<n; i++){
            presum+=nums[i];
            int rem=presum%k;
            if(rem<0){
                rem=rem+k;
            }
            if(m.find(rem)!=m.end()){
                if(i-m[rem]>=1)return true;
            }
            m.insert({rem, i+1});
        }
        return false;
    }
};
















count of SubArrayWithSumDivisibleByK

Example 1:

N = 6, K = 5
arr[] = {4, 5, 0, -2, -3, 1}
Output: 7

Explanation: There are 7 sub-arrays whose 
is divisible by K {4, 5, 0, -2, -3, 1}, {5}, 
{5, 0}, {5, 0, -2, -3}, {0}, {0, -2, -3} 
and {-2, -3}
Example 2:


N = 6, K = 2
arr[] = {2, 2, 2, 2, 2, 2}
Output: 21

Explanation: All subarray sums are 
divisible by 7

class Solution{
	public:
	typedef long long ll;
	long long subCount(long long arr[], int n, long long k)
	{
	    ll presum=0, c=0;
	    unordered_map<ll,ll> m;
	    m.insert({0,1});
	    for(int i=0; i<n; i++){
	        presum+=arr[i];
	        ll rem = presum%k;
	        if(rem<0){
	            rem=rem+k;
	        }
	        if(m.find(rem)!=m.end()){
	            c=c+m[rem];
	        }
	        m[rem]++;
	    }
	    return c;
	}
};
