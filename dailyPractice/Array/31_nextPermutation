Input: N = 6
arr = {1, 2, 3, 6, 5, 4}
Output: {1, 2, 4, 3, 5, 6}
Explaination: The next permutation of the 
given array is {1, 2, 4, 3, 5, 6}.
Example 2:

Input: N = 3
arr = {3, 2, 1}
Output: {1, 2, 3}
Explaination: As arr[] is the last 
permutation. So, the next permutation 
is the lowest one.



/*
Brute Forec:- Generate all the permutations, put it in set of vector and find next permutation by linear iteration
*/

class Solution{
public:
    set<vector<int>>v;
    void permute(vector<int>arr, int l, int h){
        if(l==h){
            v.insert(arr);
        }
        for(int i=l; i<=h; i++){
            swap(arr[l], arr[i]);
            permute(arr, l+1, h);
            swap(arr[l], arr[i]);
        }
    }

    vector<int> nextPermutation(int n, vector<int> nums) {
        vector<int>vv;
        int ff=0;
        for(int i=0; i<nums.size()-1; i++){
            if(nums[i]<nums[i+1]){ff=1;break;}
        }
        if(ff==0){
            reverse(nums.begin(), nums.end());
            return nums;
        }
        permute(nums, 0, nums.size()-1);
        int f;
        for(auto i:v){
           // int m=0;
            if(f==0){
                for(int k=0; k<i.size(); k++)vv.push_back(i[k]);
                break;
            }
            f=0;
            int k=0;
            for(auto j:i){
                //cout<<j<<" ";
                if(nums[k]!=j){
                    f=1;
                    break;
                }
                k++;
            }
          //  cout<<endl;
        }
        return vv;
    }
};





/*

Optimal Solution:-
Intuition:- 
1. Find breakpoint:- iterate from back and see if(arr[i]>arr[i-1]).
                     store the variable in ele & index in ind 
                     eg:- 1,2,3,4,5. 5 is the breakpoint. 2 1 5 4 3 0 0.
                     here 1 at index 1 is the breakpoint.

2.  find an elements. arr[i] > ele but smallest. 
    eg. for breakpoint 1, we get 3 as our ideal element not zero.

3.  swap(arr[ind], arr[min_ele_ind]
    swap(1,3) //2 3 5 4 1 0 0.

4 sort the remaining element 2 3     0 0 1 4 5 is the next permutation
*/



class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n=nums.size();
        int x=-1,y=-1;
        for(int i=n-1; i>0; --i){
            if(nums[i]>nums[i-1]){
                x=nums[i-1];
                y=i-1;
                break;
            }
        }
        if(x==-1&&y==-1){
            reverse(nums.begin(), nums.end());
            return;
        }
        int m=INT_MAX,yy=-1;
        for(int i=y+1; i<n; i++){
            if(nums[i]<m){
                if(x<nums[i]){
                    m=nums[i];
                    yy=i;
                }
            }
        }
        swap(nums[y],nums[yy]);
        sort(nums.begin()+y+1, nums.end());

    }
};
