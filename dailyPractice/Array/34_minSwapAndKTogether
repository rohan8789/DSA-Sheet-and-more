Example 1:

Input : 
arr[ ] = {2, 1, 5, 6, 3} 
K = 3
Output : 
1
Explanation:
To bring elements 2, 1, 3 together,
swap index 2 with 4 (0-based indexing),
i.e. element arr[2] = 5 with arr[4] = 3
such that final array will be- 
arr[] = {2, 1, 3, 6, 5}

Example 2:

Input : 
arr[ ] = {2, 7, 9, 5, 8, 7, 4} 
K = 6 
Output :  
2 
Explanation: 
To bring elements 2, 5, 4 together, 
swap index 0 with 2 (0-based indexing)
and index 4 with 6 (0-based indexing)
such that final array will be- 
arr[] = {9, 7, 2, 5, 4, 7, 8}


11
10 12 20 20 5 19 19 12 1 20 1
1

Intuition:-
1. Count numbers <=k. that will your window size.
2. loop around windowsize and find elements needed to be swapped i.e, >k elements
3. maintain the window and minimize the amount of elements that are needed to be swapped


int minSwap(int arr[], int n, int k) {
    // Complet the function
    int winsize=0,gret=0;
    for(int i=0; i<n; i++){
        if(arr[i]<=k){
            winsize++;
        }
    }

    for(int i=0; i<winsize; i++){
        if(arr[i]>k){
            gret++;
        }
    }
    int ans=gret;
    for(int i=winsize; i<n; i++){
        if(arr[i]>k){
            gret++;
        }
        if(arr[i-winsize]>k){
            gret--;
        }
        ans=min(ans,gret);
    }
    return ans;
}
