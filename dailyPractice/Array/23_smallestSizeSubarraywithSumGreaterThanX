Given an array of integers (A[])  and a number x, find the smallest subarray with sum greater than the given value. 
If such a subarray do not exist return 0 in that case.

Note: The answer always exists. It is guaranteed that x doesn't exceed the summation of a[i] (from 1 to N).

Example 1:

Input:
A[] = {1, 4, 45, 6, 0, 19}
x  =  51
Output: 3
Explanation:
Minimum length subarray is 
{4, 45, 6}

Example 2:
Input:
A[] = {1, 10, 5, 2, 7}
   x  = 9
Output: 1
Explanation:
Minimum length subarray is {10}


Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ N, x ≤ 105
1 ≤ A[] ≤ 104



int smallestSubWithSum(int arr[], int n, int x)
{
    // Your code goes here
    int j=0,f=0,ans=INT_MAX,s=0;
    for(int i=0; i<n; i++){
        s+=arr[i];
        while(s>x){
            s-=arr[j++];
            f=1;
        }
        if(f==1){
            //cout<<i<<" "<<j<<endl;
            ans=min(ans,i-j+2);
        }
    }
    return ans;
}



class Solution{
  public:
    int smallestSubWithSum(int arr[], int n, int x)
    {
        int j=0,f=0,ans=INT_MAX,s=0;
        for(int i=0; i<n; i++){
            s+=arr[i];
            while(s>x){
                s-=arr[j++];
                ans=min(ans,i-j+2);
            }
        }
        return ans;
    }
};
