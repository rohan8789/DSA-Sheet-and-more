//count subarray with given sum

class Solution {
public:
    int subarraySum(vector<int>& arr, int k) {
        int n=arr.size();
        int s=0, c=0;
        unordered_map<int,int>m;
        for(int i=0; i<n;i++){
            s+=arr[i];
            if(s==k)c++;
            if(m.find(s-k)!=m.end()){
                c=c+m[s-k];
            }
            m[s]++;
        }
        return c;
    }
};



//largest subarray with given sum
class Solution{
    public:
    int lenOfLongSubarr(int arr[],  int n, int k) 
    { 
        // Complete the function
        int presum=0,ans=0;
        unordered_map<int,int>m;
        for(int i=0; i<n; i++){
            presum+=arr[i];
            if(presum==k){
                ans=i+1;
            }
            if(m.find(presum-k)!=m.end()){
                ans=max(ans, i-m[presum-k]);
            }
            m.insert({presum, i});
        }
        return ans;
    } 
};





//First occuring subarray with given sum with non-negative integer.
Intuition says if array is non negative, then, for subarray with given sum, simply apply sliding window. no need of prefixSum+hashing.


Example 1:

Input:
N = 5, S = 12
A[] = {1,2,3,7,5}
Output: 2 4
Explanation: The sum of elements 
from 2nd position to 4th position 
is 12.
 

Example 2:

Input:
N = 10, S = 15
A[] = {1,2,3,4,5,6,7,8,9,10}
Output: 1 5
Explanation: The sum of elements 
from 1st position to 5th position
is 15.


4 0
1 2 3 4




Naive:-
class Solution
{
    public:
    vector<int> subarraySum(vector<int>arr, int n, long long k)
    {
        // Your code here
        vector<int>v;
        unordered_map<int,int>m;
        long long presum=0;
        for(int i=0; i<n; i++){
            presum+=arr[i];
            if(presum==k){
                v.push_back(1);
                v.push_back(i+1);
                break;
            }
            if(m.find(presum-k)!=m.end()){
                v.push_back(m[presum-k]+2);
                v.push_back(i+1);
                break;
            }
            m.insert({presum, i});
        }
        if(v.size()==0){
            return {-1};
        }
        return v;
    }
};


Sliding Window

class Solution
{
    public:
    vector<int> subarraySum(vector<int>arr, int n, long long k)
    {
        vector<int>v;
        long long sum=0;
        int j=0;
        for(int i=0; i<n; i++){
            sum+=arr[i];
            while(sum>k){
                sum=sum-arr[j];
                j++;
            }
            if(sum==k && j<=i){
                v.push_back(j+1);
                v.push_back(i+1);
                break;
            }
        }
        if(v.size()==0){
            return {-1};
        }
        return v;
    }
};
