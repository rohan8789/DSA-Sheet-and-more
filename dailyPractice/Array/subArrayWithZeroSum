bool subArrayExists(int arr[], int n)
{
    //Your code here
    unordered_map<int,int>m;
    int s=0;
    for(int i=0; i<n; i++){
        s+=arr[i];
        if(arr[i]==0||s==0)return true;
        if(m.find(s)!=m.end()){
            return true;
        }
        m.insert({s,1});
    }
    return false;
}


//print all subarray with 0 sum
#include <iostream>
#include <vector>
using namespace std;

void solve(int *arr, int n){
    vector<vector<int>>v;
    for(int i=0; i<n; i++){
        vector<int>vec;
        int s=0;
        for(int j=i; j<n; j++){
            s=s+arr[j];
            vec.push_back(arr[j]);
            if(s==0){
                cout<<i<<" "<<j<<endl;
                v.push_back(vec);
            }
        }
    }
    
    for(auto i:v){
        for(auto j:i){
            cout<<j<<" ";
        }
        cout<<endl;
    }
}

int main()
{
    int arr[]={0,0,5,5,0,0};
    int n=sizeof(arr)/sizeof(int);
    solve(arr, n);
    return 0;
}
