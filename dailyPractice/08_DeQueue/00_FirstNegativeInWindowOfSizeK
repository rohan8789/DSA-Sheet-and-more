Input : 
Arr: -8, 2, 3, -6, 10
K: 2
Output : -8 0 -6 -6


Input : 
A: {12, -1, -7, 8, -15, 30, 16, 28}
K: 3
Output : -1 -1 -7 -15 -15 0 


For Input: 
7
-10 -20 -30 -40 -50 -60 -70
2
Your Output: 
-10 -20 -30 -40 -50 -60

For Input: 
7
10 20 30 40 50 60 70
3
Your Output: 
0 0 0 0 0



We can solve this Question in multiple ways.
1. Using priority Queue by storing pair of {index , element} in ascending order.
2. Using queue of pairs.
3. Using Queue only






Method 01:- Using queue
typedef long long ll;
vector<ll> printFirstNegativeInteger(ll arr[], ll n, ll k) {
    vector<ll>v;
    queue<pair<ll,ll>>q;
    for(int i=0; i<k; i++){
        if(arr[i]<0){
            q.push({arr[i],i});
        }
    }
    if(q.size()==0){
        v.push_back(0);
    }else{
        v.push_back(q.front().first);
    }
    for(int i=k; i<n; i++){
        if(arr[i]<0){
            q.push({arr[i], i});
        }
        if(q.empty()){
            v.push_back(0);
        }
        else if(i-q.front().second<k){
            v.push_back(q.front().first);
        }else{
            q.pop();
            if(!q.empty()){
                v.push_back(q.front().first);
            }else{
                v.push_back(0);
            }
        }
    }
    return v;
}














Method 02:- Using Priority Queue
typedef long long ll;
vector<ll> printFirstNegativeInteger(ll arr[], ll n, ll k) {
    vector<ll>v;
    priority_queue<pair<ll,ll>, vector<pair<ll,ll>>, greater<pair<ll,ll>>>pq;
    for(int i=0; i<k; i++){
        if(arr[i]<0){
            pq.push({i, arr[i]});
        }
    }
    if(pq.size()==0){
        v.push_back(0);
    }else{
        v.push_back(pq.top().second);
    }
    for(int i=k; i<n; i++){
        if(arr[i]<0){
            pq.push({i, arr[i]});
        }
        if(pq.size()==0){
            v.push_back(0);
        }
        else if(i-pq.top().first<k){
            v.push_back(pq.top().second);
        }else{
            if(!pq.empty()){
                pq.pop();
                if(!pq.empty()){
                    v.push_back(pq.top().second);
                }else{
                    v.push_back(0);
                }
            }else{
                v.push_back(0);
            }
        }
    }
    return v;
}




Method 03:- Using Queue Only
typedef long long ll;
vector<ll> printFirstNegativeInteger(ll arr[], ll n, ll k) {
    vector<ll>v;
    queue<ll>q;
    for(int i=0; i<k; i++){
        if(arr[i]<0){
            q.push(arr[i]);
        }
    }
    if(q.size()==0){
        v.push_back(0);
    }else{
        v.push_back(q.front());
    }
    for(int i=k; i<n; i++){
        if(arr[i]<0){
            q.push(arr[i]);
        }
        if(arr[i-k]<0){
            q.pop();
        }
        if(q.empty()){
            v.push_back(0);
        }else{
            v.push_back(q.front());
        }
        
    }
    return v;
}
