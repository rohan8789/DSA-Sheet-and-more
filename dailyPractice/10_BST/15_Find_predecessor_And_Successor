
11 6 18 3 9 16 21 2 N 8 N N N 19 23 N N 7 N N N N N N N
6

10 4 N 1 5 N N N 6 N 8 N N
1


Method 01:- Brute force using Inorder vector.
class Solution
{
    public:
    
    void solve(Node* root, vector<Node*>&v){
        if(root==NULL)return;
        solve(root->left,v);
        v.push_back(root);
        solve(root->right,v);
    }
    
    void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
    {
        if(root==NULL)return;
        vector<Node*>v;
        solve(root,v);
        if(v[0]->key>key){
            suc=v[0];
        }else if(v[0]->key==key){
            suc=v[1];
        }
        int i;
        for(i=0; i<v.size()-1; i++){
            if(v[i]->key<key &&v[i+1]->key>key){
                pre=v[i];
                suc=v[i+1];
            }else if(v[i]->key==key && i!=0){
                pre=v[i-1];
                suc=v[i+1];
            }
        }
        if(v[i]->key<key){
            pre=v[i];
        }else if(v[i]->key==key){
            pre=v[i-1];
        }
    }
};


Method 02:- Using Recursion
class Solution
{
    public:
    void solve(Node* root, Node*&pre, Node*&suc, int key){
        if(root==NULL)return;
        if(root->key>key){
            suc=root;
            solve(root->left,pre,suc,key);
        }else if(root->key<key){
            pre=root;
            solve(root->right,pre,suc,key);
        }else{
            solve(root->left,pre,suc,key);
            solve(root->right,pre,suc,key);
        }
    }
    
    void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
    {
        if(root==NULL)return;
        solve(root,pre,suc,key);
    }
};



Method 03:-(Most efficient) call a function to find predecessor and another function to find successor
void prede(Node* root, Node*& pre, int key)
{
    while(root!=0)
    {
        if(key<=root->key)
        {
            root=root->left;
        }
        else
        {
            pre=root;
            root=root->right;
        }
    }
}
void succe(Node* root, Node*& suc, int key)
{
    while(root!=0)
    {
        if(key>= root->key)
        {
            root=root->right;
        }
        else
        {
            suc=root;
            root=root->left;
        }
    }
}
void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
{
    prede(root,pre,key);
    succe(root,suc,key);
}
