Method 1:- 3 pointer +Binary search
1 1 1 2 2 2 3 3 3 4 4 target = 9
i=0, j=i+1, k=j+1;
//we have
i=1 j=1 k=1 now apply BS on element (2-4) and find 9-(i+1+1)
//You will get your first answer on i=1 j=1 k=3 hence 
apply bs  find 9-(1+1+3) === 4 available in search range.




Method 02:- Sorting and 2 pointer
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        vector<vector<int>>v;
        int n=nums.size();
        for(int i=0; i<n-3; i++){
            if(i>0&&nums[i]==nums[i-1]){
                continue;
            }
            for(int j=i+1; j<n-2; j++){
                if(j>i+1&&nums[j]==nums[j-1]){
                    continue;
                }
                int l=j+1;
                int h=n-1;
                while(l<h){
                    long long s=(long long)nums[i]+(long long)nums[j]+(long long)nums[l]+(long long)nums[h];
                    // cout<<"S printed: "<<l<<" "<<h<<endl;
                    if(s==target){
                        v.push_back({nums[i], nums[j], nums[l], nums[h]});
                        while(l<h&&nums[l]==nums[l+1]){l++;}
                        while(l<h&&nums[h]==nums[h-1]){h--;}
                        l++;h--;
                    }else if(s<target){
                        l++;
                    }else{
                        h--;
                    }
                }
            }
        }
        return v;
    }
};
