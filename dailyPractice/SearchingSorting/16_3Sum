Method 01:- Sort array and use set of vector to store unique triplet
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>>v;
        set<vector<int>>sv;
        sort(nums.begin(), nums.end());
        int n=nums.size();
        for(int i=0; i<n-2; i++){
            int l=i+1;
            int h=n-1;
            while(l<h){
                //cout<<nums[i]<<" "<<nums[l]<<" "<<nums[h]<<endl;
                int s=nums[i]+nums[l]+nums[h];
                if(s==0){
                    sv.insert({nums[i], nums[l], nums[h]});
                    l++;h--;
                }else if(s<0){
                    l++;
                }else{
                    h--;
                }
            }
        }
        for(auto triplet:sv){
            v.push_back(triplet);
        }
        return v;
    }
};

Method 02:- Use Map

Method 03:- Most optimal----> constant space solution

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>>v;
        sort(nums.begin(), nums.end());
        int n=nums.size();
        for(int i=0; i<n-2; i++){
            if(i>0&& nums[i]==nums[i-1])continue;
            int l=i+1;
            int h=n-1;
            while(l<h){
                //cout<<nums[i]<<" "<<nums[l]<<" "<<nums[h]<<endl;
                int s=nums[i]+nums[l]+nums[h];
                if(s==0){
                    v.push_back({nums[i], nums[l], nums[h]});
                    while(l<h&&nums[l]==nums[l+1]){l++;}
                    while(l<h&&nums[h]==nums[h-1]){h--;}
                    l++;h--;
                }else if(s<0){
                    l++;
                }else{
                    h--;
                }
            }            
        }
        
        return v;
    }
};
