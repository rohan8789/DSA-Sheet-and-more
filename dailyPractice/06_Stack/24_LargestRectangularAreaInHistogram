Input:
N = 7
arr[] = {6,2,5,4,5,1,6}
Output: 12


Input:
N = 8
arr[] = {7 2 8 9 1 3 6 5}
Output: 16



Brute force Solution:- 

class Solution
{
    public:
    typedef long long ll;
    ll getMaxArea(ll arr[], int n)
    {
        ll ans=LONG_MIN;
        for(int i=0; i<n; i++){
            ll m=LONG_MAX, k=1, res=LONG_MIN;
            for(int j=i; j<n; j++){
                m=min(m,arr[j]);
                ll x=m*k;
                res=max(res, x);
                k++;
            }
            ans=max(ans,res);
        }
        return ans;
    }
};



Efficient SOlution:-
1. find indices of previous smaller elements in the array
2. find indices of next smaller elements in the array
3. take Length as arr[i] and width as ns-ps-1;
4. find L*W and return the maximum area


class Solution
{
    public:
    typedef long long ll;
    vector<ll> presmaller(ll arr[], int n){
        vector<ll>v;
        stack<ll>s;
        v.push_back(-1);
        s.push(0);
        for(int i=1; i<n; i++){
            if(arr[s.top()]<arr[i]){
                v.push_back(s.top());
            }else{
                while(!s.empty() && arr[s.top()]>=arr[i]){
                    s.pop();
                }
                if(s.empty()){
                    v.push_back(-1);
                }else{
                    v.push_back(s.top());
                }
            }
            s.push(i);
        }
        return v;
    }
    
    vector<ll> nextsmaller(ll arr[], int n){
        vector<ll>v;
        stack<ll>s;
        v.push_back(n);
        s.push(n-1);
        for(int i=n-2; i>=0; --i){
            if(arr[s.top()]<arr[i]){
                v.push_back(s.top());
            }else{
                while(!s.empty() && arr[s.top()]>=arr[i]){
                    s.pop();
                }
                if(s.empty()){
                    v.push_back(n);
                }else{
                    v.push_back(s.top());
                }
            }
            s.push(i);
        }
        reverse(v.begin(), v.end());
        return v;
    }
    
    ll getMaxArea(ll arr[], int n)
    {
        ll res=INT_MIN;
        vector<ll>ps=presmaller(arr, n);
        vector<ll>ns=nextsmaller(arr,n);
        for(int i=0; i<n; i++){
            ll l=arr[i];
            ll w=ns[i]-ps[i]-1;
            ll area = l*w;
            res=max(res,area);
        }
        return res;
    }
};
