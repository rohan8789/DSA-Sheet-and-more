method 01:- using additional data structure;
class Solution
{
    public:
    void deleteMid(stack<int>&s, int n)
    {
        int m=0;
        m=n/2;
        m=m+1;
        int j=1;
        stack<int>st;
        while(!s.empty()){
            if(j!=m){
                st.push(s.top());
            }
            j++;
            s.pop();
        }
        while(!st.empty()){
            s.push(st.top());
            st.pop();
        }
    }
};


method 02:- Using recursion

class Solution
{
    public:
    void midDelete(stack<int>&s, int m){
        if(m==0){
            s.pop();
            return;
        }
        int x=s.top();
        s.pop();
        midDelete(s,m-1);
        s.push(x);
    }
    void deleteMid(stack<int>&s, int n)
    {
        int m=n/2;
        midDelete(s,m);
    }
};
