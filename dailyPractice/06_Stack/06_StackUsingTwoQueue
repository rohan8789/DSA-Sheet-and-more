method 01:- By making pop() function expensive

class MyStack {
public:
    queue<int>q1,q2;
    int size;
    MyStack() {
        size=0;        
    }
    
    void push(int x) {
        q1.push(x);
    }
    
    int pop() {
        while(q1.size()!=1){
            q2.push(q1.front());
            q1.pop();
        }
        int x=q1.front();
        q1.pop();
        while(!q2.empty()){
            q1.push(q2.front());
            q2.pop();
        }
        return x;
    }
    
    int top() {
        while(q1.size()!=1){
            q2.push(q1.front());
            q1.pop();
        }
        int x=q1.front();
        q1.pop();
        q2.push(x);
        while(!q2.empty()){
            q1.push(q2.front());
            q2.pop();
        }
        return x;
    }
    
    bool empty() {
        return q1.empty();
    }
};




method 02:- By making push function expensive
class MyStack {
public:
    queue<int>q1,q2;
    MyStack() {}

    void push(int x) {
        q1.push(x);
        while(!q2.empty()){
            q1.push(q2.front());
            q2.pop();
        }
        queue<int> q=q1;
        q1=q2;
        q2=q;
    }
    
    int pop() {
        if(!q2.size())return -1;
        int x=q2.front();
        q2.pop();
        return x;
    }
    
    int top() {
        if(!q2.size())return -1;
        int x=q2.front();
        return x;
    }
    
    bool empty() {
        return q2.size()==0;
    }
};
