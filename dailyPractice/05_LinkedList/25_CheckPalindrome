//check for even and odd length Palindrome both





class Solution{
  public:
    Node* findMid(Node* head){
        Node* slow=head, *fast=head;
        while(fast!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        if(fast==NULL)return slow;
        return slow->next;
    }
    
    Node* Reverse(Node *head){
        Node *prev=NULL;
        while(head!=NULL){
            Node *a=head->next;
            head->next=prev;
            prev=head;
            head=a;
        }
        return prev;
    }
    
    bool isPalindrome(Node *head)
    {
        if(head->next==NULL)return true;
        if(head->next->next==NULL){
            if(head->data==head->next->data)return true;
            return false;
        }
        Node* ans=findMid(head);
        Node* temp=Reverse(ans);
        Node* res=head;
        while(temp!=NULL){
            if(res->data!=temp->data)return false;
            res=res->next;
            temp=temp->next;
        }
        return true;
    }
};
















class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head==NULL||head->next==NULL)return true;
        ListNode* temp=head, *prev=NULL;
        ListNode* ans=new ListNode(-1);
        ListNode* aa=ans;
        
        while(temp!=NULL){
            ans->next=new ListNode(temp->val);
            ListNode* a=temp->next;
            temp->next=prev;
            prev=temp;
            temp=a;
            ans=ans->next;
        }
        aa=aa->next;
        while(aa!=NULL){
            if(prev->val!=aa->val)return false;
            prev=prev->next;
            aa=aa->next;
        }
        return true;
    }
};
