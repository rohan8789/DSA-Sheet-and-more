class Solution
{
    public:
    Node* segregate(Node *head) {
        if(head==NULL||head->next==NULL)return head;
        Node* temp=head;
        int zero=0, one=0, two=0;
        while(temp!=NULL){
            if(temp->data==0){
                zero++;
            }else if(temp->data==1){
                one++;
            }else{
                two++;
            }
            temp=temp->next;
        }
        temp=head;
        while(temp!=NULL){
            if(zero>0){
                temp->data=0;
                zero--;
            }else if(one>0){
                temp->data=1;
                one--;
            }else{
                temp->data=2;
                two--;
            }
            temp=temp->next;
        }
        return head;
    }
};










class Solution
{
    public:
    Node* segregate(Node *head) {
        Node* temp=head;
        Node* zero=new Node(-1);
        Node* zeroTail=zero;
        Node* one=new Node(-1);
        Node* oneTail=one;
        Node* two=new Node(-1);
        Node* twoTail=two;
        while(temp!=NULL){
            if(temp->data==0){
                zeroTail->next=temp;
                zeroTail=zeroTail->next;
            }else if(temp->data==1){
                oneTail->next=temp;
                oneTail=oneTail->next;
            }else{
                twoTail->next=temp;
                twoTail=twoTail->next;
            }
            temp=temp->next;
        }
        if(zero->next==NULL){
            oneTail->next=two->next;
            twoTail->next=NULL;
            return one->next;
        }
        else if(one->next==NULL){
            zeroTail->next=two->next;
            twoTail->next=NULL;
            return zero->next;
        }
        zeroTail->next=one->next;
        oneTail->next=two->next;
        twoTail->next=NULL;
        return zero->next;
    }
};
