

//Wont work in case of negative elemeents. we are not finding final answer on leaf rather we are finding answer on each point.
class Solution{
    public:
    int solve(Node* root, int&ans){
        if(root==NULL)return 0;
        int ls=solve(root->left, ans);
        int rs=solve(root->right, ans);
        return root->data+max(ls,rs);
    }
    
    int maxPathSum(Node* root){
        if(root==NULL)return 0;
        int ans=INT_MIN;
        int x=solve(root, ans);
        return x;
    }
};
















class Solution{
    public:
    void solve(Node* root, vector<int>v, int&ans){
        if(root==NULL)return;
        v.push_back(root->data);
        solve(root->left, v, ans);
        solve(root->right, v, ans);
        if(root->left==NULL && root->right==NULL){
            int sum=0;
            for(int i=0; i<v.size(); i++)sum+=v[i];
            ans=max(ans,sum);
        }
    }
    
    int maxPathSum(Node* root){
        if(root==NULL)return 0;
        int ans=INT_MIN;
        vector<int>v;
        solve(root, v, ans);
        return ans;
    }
};




Better Solution:-
class Solution{
    public:
    void find(Node *root, int sum, int &m){
        if(root==NULL)
            return;
        sum=sum+root->data;
        if(root->left==NULL && root->right==NULL){
            m=max(m, sum);
        }
        find(root->left, sum,m);
        find(root->right, sum, m);
    }
    
    int maxPathSum(Node* root){
        if(root==NULL)
            return 0;
        vector<int> v;
        int m=INT_MIN;
        find(root, 0, m);
        return m;
    }
};
