1 3 1 2 N 1 2 2 4 N 3 2 1 1 N 1 1 3 1 N 1 2 2 1
5

For Input: 
1 2 3 N N 4 6 N 5 N N 7 N
Your Output: 
2


class Solution{
  public:
    void solve(Node* root, int lvl, int &ans){
        if(root==NULL)return;
        if(root->left==NULL&&root->right==NULL){
            ans=min(ans, lvl+1);
        }
        solve(root->left, lvl+1, ans);
        solve(root->right, lvl+1, ans);
    }
    int minDepth(Node *root) {
        if(root==NULL)return 0;
        int ans=INT_MAX;
        solve(root, 0, ans);
        return ans;
    }
};








Method 02:-
class Solution{
  public:
    int minDepth(Node *root) {
        if(root==NULL)return 0;
        int lh=minDepth(root->left);
        int rh=minDepth(root->right);
        if(root->left!=NULL && root->right==NULL){
            return lh+1;
        }
        else if(root->left==NULL && root->right!=NULL){
            return rh+1;
        }
        return min(lh,rh)+1;
    }
};
