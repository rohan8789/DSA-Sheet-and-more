
Method 01:- Brute Force (TLE)

class Solution
{
    public:
    Node* ans=0;
    int f=0;
    void solve(Node* root, int n1, int n2, unordered_map<Node*,int>m, unordered_map<Node*,int>&m1){
        if(root==NULL)return;
        
        m[root]++;
        solve(root->left,n1,n2,m,m1);
        solve(root->right,n1,n2,m,m1);

        if(n1==root->data||n2==root->data){
            for(auto i:m){
                m1[i.first]++;
                if(m1[i.first]>=2 &&f==0){
                    ans=i.first;
                    f=1;
                }
            }
        }
       
    }
    
    Node* lca(Node* root ,int n1 ,int n2 )
    {
        if(root==NULL)return NULL;
        Node* temp=root;
        unordered_map<Node*,int>m;
        unordered_map<Node*,int>m1;
        solve(root, n1, n2, m, m1);
        return ans;
    }
};





Method 02:- Eliminating TLE using better Data structure
class Solution
{
    public:
    void solve(Node* root, int n, vector<Node*>v, vector<Node*>&v1){
        if(root==NULL)return;
        
        v.push_back(root);
        solve(root->left,n,v,v1);
        solve(root->right,n,v,v1);
        
        if(n==root->data){
            for(int i=0; i<v.size(); i++){
                v1.push_back(v[i]);
            }
        }
    }
    
    Node* lca(Node* root ,int n1 ,int n2 )
    {
        if(root==NULL)return NULL;
        Node* temp=root;
        vector<Node*>v1,v2,v;
        solve(root,n1,v,v1);
        solve(root,n2,v,v2);
        int i=0, j=0;
        while(i<v1.size() && j<v2.size()){
            if(v1[i]!=v2[i])break;
            i++;j++;
        }
        return v1[i-1];
    }
};







i guess, your code will end up popping all the elements in any case. either you found n or not found n. it will definately pop all the elements. To avoid that , simply call 

if(findPath() || findPath()) return; before popping.

but why???

because, take an example,

1. On a particular path you did not found n==root->data which meant 0 || 0 ------> 0 then it will pop the elements because they are unnecessary. 

2.  In case of 1 || 0------>1 it will not pop as we have found a path

3. In case of 0 || 1 ----->1 it will not pop as we have found a path.

that is the logic behind.  I hope you understood. it took time to me to figure it out. pls upvote

Method 03:- Without passing extra vector to function call.
TC: O(2N) + SC: O(2N + H)
class Solution
{
    public:
    bool solve(Node* root, int n, vector<Node*>&v){
        if(root==NULL)return false;
        v.push_back(root);
        if(n==root->data){
            return true;
        }
        if(solve(root->left,n,v) || solve(root->right,n,v)){
            return true;
        }
        v.pop_back();
        return false;
    }
    
    Node* lca(Node* root ,int n1 ,int n2 )
    {
        if(root==NULL)return NULL;
        vector<Node*>v1,v2;
        solve(root, n1, v1);
        solve(root, n2, v2);
        int i=0, j=0;
        while(i<v1.size()&&j<v2.size()){
            if(v1[i]!=v2[j]){
                break;
            }
            i++;j++;
        }
        return v1[i-1];
    }
};





Method 04:- Most Efficient approach
Idea:- Traverse the tree.
        1. when you reach the leaf node and did not found n1 or n2 return NULL;
class Solution
{
    public:
    Node* solve(Node* root, int n1, int n2){
        if(root==NULL)return NULL;
        if(n1==root->data)return root;
        if(n2==root->data)return root;
        
        Node* l=solve(root->left, n1, n2);
        Node* r=solve(root->right, n1,n2);
        
        if(l!=NULL && r!=NULL)return root;
        else if(l!=NULL)return l;
        return r;    //NULL to hoga hi, left ho ya right
    }
    
    Node* lca(Node* root ,int n1 ,int n2 )
    {
       if(root==NULL)return NULL;
       Node* ans=solve(root, n1, n2);
       return ans;
    }
};
