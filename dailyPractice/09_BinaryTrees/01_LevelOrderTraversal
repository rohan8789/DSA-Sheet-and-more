class Solution
{
    public:
    vector<int> levelOrder(Node* root)
    {
        if(root==NULL)return {};
        queue<Node*>q;
        vector<int>v;
        q.push(root);
        while(!q.empty()){
            int n=q.size();
            for(int i=0; i<n; i++){
                Node* fData=q.front();
                q.pop();
                v.push_back(fData->data);
                if(fData->left){
                    q.push(fData->left);
                }
                if(fData->right){
                    q.push(fData->right);
                }
            }
        }
        return v;
    }
};



Reverse Level Order Traversal
vector<int> reverseLevelOrder(Node *root)
{
    vector<int>v;
    queue<Node*>q;
    q.push(root);
    while(!q.empty()){
        int n=q.size(); 
        for(int i=0; i<n; i++){
            Node* front=q.front();
            q.pop();
            v.push_back(front->data);
            if(front->right){
                q.push(front->right);
            }
            if(front->left){
                q.push(front->left);
            }
        }
    }
    reverse(v.begin(), v.end());
    return v;
}
